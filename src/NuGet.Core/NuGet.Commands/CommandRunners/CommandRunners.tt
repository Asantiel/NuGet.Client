<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml.XDocument" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#

 string InitCaps(string input)
 {
    string output = input.Substring(0,1).ToUpper() + input.Substring(1);
    return output;
 }
 bool IsArgument(string type)
 {
    return type == "Argument";
 }
 string GetProperty(XElement element)
 {
    switch  (element.Name.LocalName)
    {
        case "SingleValueOption":
            return "Option";
        case "SwitchOption":
            return "Option";
        case "Argument":
            return "Argument";
        default:
            return "Unknown Element Type" + element.Name.LocalName;
    }
 }
 string GetOptionType(XElement element)
 {
    switch (element.Name.LocalName)
    {
        case "SingleValueOption":
            return "SingleValue";
        case "SwitchOption":
            return "NoValue";
        default:
            return "Unknown Element Type" + element.Name.LocalName;
    }
 }

 var commandFile = this.Host.ResolvePath("..\\..\\NuGet.CommandLine.XPlat\\Commands\\Commands.xml");
 var commands = XDocument.Load(commandFile);
#>
using System;
using System.Threading.Tasks;
using NuGet.Common;


namespace NuGet.CommandLine.XPlat
{

 <#
 // ********************* Command-FRunner ***************************

  foreach (var command in commands.Descendants(XName.Get("Command","")))
 {
    var commandName = command.Attribute(XName.Get("Name", "")).Value;
    var commandFormalName = InitCaps(commandName);
#>

     public partial class <#= commandFormalName #>Runner
    {
        static public void Run(<#= commandFormalName #>FArgs args, Func<ILogger> getLogger)
        {
            Output(args, getLogger);
        }

        static void Output(<#= commandFormalName #>FArgs args, Func<ILogger> getLogger)
        {
            Type argsType = args.GetType();
            foreach (var propInfo in argsType.GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic))
            {
                getLogger().LogInformation(propInfo.Name + " = " + propInfo.GetValue(args));
            }

            return;
        }
    } 

<#
} // End of Runner class
#>
 

}
