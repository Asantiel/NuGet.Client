<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml.XDocument" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#

 string InitCaps(string input)
 {
    string output = input.Substring(0,1).ToUpper() + input.Substring(1);
    return output;
 }
 bool IsArgument(string type)
 {
    return type == "Argument";
 }
 string GetProperty(XElement element)
 {
    switch  (element.Name.LocalName)
    {
        case "SingleValueOption":
            return "Option";
        case "SwitchOption":
            return "Option";
        case "Argument":
            return "Argument";
        default:
            return "Unknown Element Type" + element.Name.LocalName;
    }
 }
 string GetOptionType(XElement element)
 {
    switch (element.Name.LocalName)
    {
        case "SingleValueOption":
            return "SingleValue";
        case "SwitchOption":
            return "NoValue";
        default:
            return "Unknown Element Type" + element.Name.LocalName;
    }
 }

 var commandFile = this.Host.ResolvePath("Commands.xml");
 var commands = XDocument.Load(commandFile);
#>
using System;
using System.Threading.Tasks;
using Microsoft.Extensions.CommandLineUtils;
using NuGet.Commands;
using NuGet.Common;


namespace NuGet.CommandLine.XPlat
{

    internal class CommandParsers
    {
        public static void Register(CommandLineApplication app, Func<ILogger> getLogger)
        {
<#
 foreach (var command in commands.Descendants(XName.Get("Verb","")))
 {
    var verbName = command.Attribute(XName.Get("Name", "")).Value;
    var verbFormalName = InitCaps(verbName);
#>
            <#= verbFormalName #>VerbParser.Register(app, getLogger);
<#
 }
#>

<#
 foreach (var command in commands.Descendants(XName.Get("Command","")))
 {
    var commandName = command.Attribute(XName.Get("Name", "")).Value;
    var commandFormalName = InitCaps(commandName);
#>
            <#= commandFormalName #>CommandParser.Register(app, getLogger);
<#
 }
#>
        }
    }

<#
 foreach (var command in commands.Descendants(XName.Get("Command","")))
 {
    var commandName = command.Attribute(XName.Get("Name", "")).Value;
    var commandFormalName = InitCaps(commandName);
#>

    internal partial class <#= commandFormalName #>CommandParser
    {
        internal static void Register(CommandLineApplication app, Func<ILogger> getLogger)
        {
            app.Command("<#= commandName #>", <#= commandFormalName #>Cmd =>
            {
<#
        foreach (var option in command.Descendants()) {
            var optionName = option.Attribute(XName.Get("Name", "")).Value;
            var optionHelp = option.Attribute(XName.Get("Help", ""))?.Value;
            var optionFormalName = optionName.Replace("-","");
            var optionCapsName = InitCaps(optionName);
            if (IsArgument(GetProperty(option)))
            {
#>
                var <#= optionFormalName #> = <#= commandFormalName #>Cmd.Argument(
                    "<#= optionName #>", "<#= optionHelp != null ? optionHelp : "" #>");
<#
            }
            else
            {
                var optionShortcut = option.Attribute(XName.Get("Shortcut",""))?.Value;
#>
                var <#= optionFormalName #> = <#= commandFormalName #>Cmd.Option(
                    "<#= (optionShortcut != null ? "-" + optionShortcut + "|" : "") + "--" + optionName #>",
                    Strings.Source_Description,
                    CommandOptionType.<#= GetOptionType(option) #>);
<#
            }
        }
#>
                <#= commandFormalName #>Cmd.HelpOption("-h|--help");

                <#= commandFormalName #>Cmd.OnExecute(() =>
                {
                    var args = new <#= commandFormalName #>FArgs()
                    {
<#
        foreach (var option in command.Descendants()) {
            var optionName = option.Attribute(XName.Get("Name", "")).Value;
            var optionFormalName = optionName.Replace("-","");
            var optionCapsName = InitCaps(optionFormalName);
            if (IsArgument(GetProperty(option)))
            {
#>
                        <#= optionCapsName #> = <#=optionFormalName#>.Value,
<#
            }
            else
            {
                var optionType = GetOptionType(option);
                switch (optionType)
                {
                    case "SingleValue":
#>
                        <#= optionCapsName #> = <#= optionFormalName #>.Value(),
<#                    
                    break;
                    case "NoValue":
#>
                        <#= optionCapsName #> = <#= optionFormalName #>.HasValue(),
<#                    
                    break;
                }
            
            }
        }
    
#>
                    };


<#  // ****** IMPLEMENT REQUIRED ARGUMENTS ********
    

        foreach (var option in command.Descendants()) {
            var optionName = option.Attribute(XName.Get("Name", "")).Value;
            var required = option.Attribute(XName.Get("Required", ""))?.Value == "true";
            var optionFormalName = optionName.Replace("-","");
            var optionCapsName = InitCaps(optionFormalName);

            if (required)
            {
                if (IsArgument(GetProperty(option)))
                {
#>
                    if (args.<#= optionCapsName #> == null)
                    {
                        throw new CommandException("'<#=optionFormalName#>' argument is missing but required.");
                    }
<#
                }
                else
                {
                    var optionType = GetOptionType(option);
                    switch (optionType)
                    {
                        case "SingleValue":
#>
                        if (args.<#= optionCapsName #> == null)
                        {
                            throw new CommandException("'<#=optionFormalName#>' option is missing but required.");
                        }
<#                    
                        break;
                        case "NoValue":
#>
                        //TODO: implement required for bool
<#                    
                        break;
                    }
            
                }
            }
        }
// ****** END - IMPLEMENT REQUIRED ARGUMENTS ********
#> 

                    <#= commandFormalName #>FRunner.Run(args, getLogger);
                    return 0;
                });
            });
        }
    }
<#
} // End of CommandParser class
#>

}
